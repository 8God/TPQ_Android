package com.zcmedical.common.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEIGHT".
*/
public class WeightDao extends AbstractDao<Weight, Long> {

    public static final String TABLENAME = "WEIGHT";

    /**
     * Properties of entity Weight.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Weight = new Property(2, int.class, "weight", false, "WEIGHT");
        public final static Property Height = new Property(3, int.class, "height", false, "HEIGHT");
        public final static Property Target_weight = new Property(4, int.class, "target_weight", false, "TARGET_WEIGHT");
        public final static Property Bmi = new Property(5, int.class, "bmi", false, "BMI");
        public final static Property Created_at = new Property(6, long.class, "created_at", false, "CREATED_AT");
    };


    public WeightDao(DaoConfig config) {
        super(config);
    }
    
    public WeightDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEIGHT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"WEIGHT\" INTEGER NOT NULL ," + // 2: weight
                "\"HEIGHT\" INTEGER NOT NULL ," + // 3: height
                "\"TARGET_WEIGHT\" INTEGER NOT NULL ," + // 4: target_weight
                "\"BMI\" INTEGER NOT NULL ," + // 5: bmi
                "\"CREATED_AT\" INTEGER NOT NULL );"); // 6: created_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEIGHT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Weight entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
        stmt.bindLong(3, entity.getWeight());
        stmt.bindLong(4, entity.getHeight());
        stmt.bindLong(5, entity.getTarget_weight());
        stmt.bindLong(6, entity.getBmi());
        stmt.bindLong(7, entity.getCreated_at());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Weight readEntity(Cursor cursor, int offset) {
        Weight entity = new Weight( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.getInt(offset + 2), // weight
            cursor.getInt(offset + 3), // height
            cursor.getInt(offset + 4), // target_weight
            cursor.getInt(offset + 5), // bmi
            cursor.getLong(offset + 6) // created_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Weight entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeight(cursor.getInt(offset + 2));
        entity.setHeight(cursor.getInt(offset + 3));
        entity.setTarget_weight(cursor.getInt(offset + 4));
        entity.setBmi(cursor.getInt(offset + 5));
        entity.setCreated_at(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Weight entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Weight entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
